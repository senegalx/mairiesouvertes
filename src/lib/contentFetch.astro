---
import client from "./api/apollo-client";
import {
  MembreListDocument,
  ArticleListDocument,
  CommuneListDocument,
  TemoignageUneDocument,
  ArticleUneDocument,
  AuteursDocument,
  PublicationsDocument,
  usePublicationByCommuneQuery,
  PublicationByCommuneDocument,
  PublicationsUneDocument
} from "./gql/generated";

export async function getMembreList() {
  const { data } = await client.query({
    query: MembreListDocument,
  });

  const members = data.membres.nodes.map((membre) => {
    const socialArray = Object.keys(membre.social)
      .filter((key) => key !== "__typename")
      .map((key) => {
        const platformName = `Fa${key.charAt(0).toUpperCase()}${key.slice(1)}`;
        return {
          platform: platformName,
          url: membre.social[key],
        };
      });

    return {
      ...membre, // Copie toutes les autres propriétés de membre
      social: socialArray, // Remplace la propriété social par le nouveau tableau
    };
  });

  return members;
}

export async function getArticleList() {
  const { data } = await client.query({
    query: ArticleListDocument,
  });

  return data.posts.edges;
}

export async function getCommuneList() {
  const { data } = await client.query({
    query: CommuneListDocument,
  });

  return data.pageBy.children.nodes;
}

export async function getTemoignageUne(communeSlug: string | undefined = undefined) {
  const { data } = await client.query({
    query: TemoignageUneDocument,
  });

  let temoignages = data.temoignages.nodes;

  if (communeSlug) {
    temoignages = temoignages.filter(temoignage => 
      temoignage.temoin.commune.nodes.some(commune => commune.slug === communeSlug)
    );
  }
  
  return temoignages;
}

export async function getArticleUne() {
  const { data } = await client.query({
    query: ArticleUneDocument,
  });

  return data.posts.edges;
}

export async function getAuteurs() {
  const { data } = await client.query({
    query: AuteursDocument,
  });

  const users = data.users.nodes.map((membre) => {
    const socialArray = Object.keys(membre.social)
      .filter((key) => key !== "__typename")
      .map((key) => {
        const platformName = `Fa${key.charAt(0).toUpperCase()}${key.slice(1)}`;
        return {
          platform: platformName,
          url: membre.social[key],
        };
      });

    return {
      ...membre, // Copie toutes les autres propriétés de membre
      social: socialArray, // Remplace la propriété social par le nouveau tableau
    };
  });
  
  return users;
}

export async function getPublications() {
  const { data } = await client.query({
    query: PublicationsDocument,
  });
  
  return data?.publications?.nodes || [];
}

export async function getPublicationsUne() {
  const { data } = await client.query({
    query: PublicationsUneDocument,
  });

  return data?.publications?.nodes || [];
}

export async function getPublicationByCommune(communeName: string) {
  const { data } = await client.query({
    query: PublicationByCommuneDocument,
    variables: { communeName: communeName }
  });

  return data?.publications?.nodes || [];
}
---
